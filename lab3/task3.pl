% 1. Определить предикаты "чет" и "нечет" определяющие чётность и
%    нечётность длины списка (предикат "длина" не использовать).
  чет([]).
  чет([_ | Tail]) :- нечет(Tail).
нечет([_ | Tail]) :- чет(Tail).

% 2. Определить предикат "обратить", который меняет порядок элементов списка
%    на противоположный. Подсказка: можно обратить хвост списка, а затем
%    присоединить его к одноэлементному списку, состоящему из головы исходного списка.
reverse([], []).
reverse([H | Tail], Reversed) :-
    reverse(Tail, Res), append(Res, [H], Reversed).

% 3. Определить предикат "палиндром", выясняющий, является ли заданный список
%    палиндромом (т.е. читается одинаково с конца и с начала).
is_palindrom(Left, Right) :- reverse(Left, Right).

% 4. Определить предикаты "shiftl" и "shiftr", выполняющие циклические
%    сдвиги элементов спис/ка влево и вправо соответственно.
shiftl([H | Tail], Shifted) :- append(Tail, [H], Shifted).
shiftr(List, Shifted)       :- shiftl(Shifted, List).

% 5. Определить предикат "maxlist", отыскивающий наибольший
%    элемент в заданном числовом списке.
maxlist([X], X) :- !.
maxlist([H | List], Result) :-
    maxlist(List, Max),
    (H >= Max -> Result is H; Result is Max).

% 6. Определить предикат "sumlist", вычисляющий сумму
%    элементов заданного числового списка.
sumlist([], 0) :- !.
sumlist([H | List], Result) :-
    sumlist(List, Sum),
    Result is H + Sum.

% 8. Определить предикат нахождения в списке n-ного элемента
nth_element([Elem | _],    1, Elem) :- !.
nth_element([_    | List], N, Elem) :-
    K is N - 1, nth_element(List, K, Elem).

% 9. Определить предикат добавления нового элемента в начало списка
push_front(List, X, [X | List]).

% 10. Определить предикат добавления нового элемента в конец списка
push_back(List, X, Res) :-
    append(List, [X], Res).
